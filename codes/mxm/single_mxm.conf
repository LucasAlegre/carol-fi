[DEFAULT]

debug = False

# Name of the gdb executable
gdbExecName = /usr/local/cuda-9.2/bin/cuda-gdb

# Which fault model to use, 0 -> single; 1 -> double;
# 2 -> random; 3 -> zeros; 4 -> least 16 significant bits (LSB);
# 5 -> least 8 significant bits (LSB)
# If you want multiple fault models, place them separated by ','
# faultModel = 0,2,3
faultModel = 0

# Injection site
# Can be:
# RF -> Register File
# INST_OUT -> Instruction Output (NOT IMPLEMENTED YET)
# INST_ADD -> Instruction Adress (NOT IMPLEMENTED YET)
injectionSite = RF

# KERNEL_BREAKS dict must have the line breakpoint for those kernels
# that the faults will be injected
# <.cu source file>:<first line of the kernel>;<.cu source file2>:<first line of the kernel2>...
kernelBreaks = cuda_trip_mxm.cu:576-cuda_trip_mxm.cu:585;

# kludge
# Some kernels will not stop at the first time
kludge = cuda_trip_mxm.cu:951

# Max time factor to finish the app, this will be multiplied by the application running time
# For example if your app spend 2s, and the maxWaitTimes is 5, the max running time before it is
# Considered as a crash is 10s
maxWaitTimes = 5

# Commands to set the session inside GDB environment
#./cuda_trip_mxm_single -size=1024 -input_a=./mxm_single_A_8192.matrix -input_b=./mxm_single_B_8192.matrix -gold=./mxm_single_GOLD_.matrix -iterations=10 -verbose

gdbInitStrings = file /home/carol/carol-fi/codes/mxm/cuda_trip_mxm_single;set args \
                -size=1024 -input_a=/home/carol/carol-fi/codes/mxm/mxm_single_A_8192.matrix \
                -input_b=/home/carol/carol-fi/codes/mxm/mxm_single_B_8192.matrix \
                -gold=/home/carol/carol-fi/codes/mxm/mxm_single_GOLD_.matrix -iterations=1

# Shell command to send SIGINT to the application being tested
signalCmd = killall -2 cuda_trip_mxm_single

# Kill commands to exit all applications (GDB and the application tested)
# Need to ensure safe termination before another fault injection test
killStrs = killall -9 cuda-gdb;killall -9 cuda_trip_mxm_single;killall -9 cudbgprocess;killall -9 profiler.py; killall -9 flip_value.py

# CSV output file. It will be overwrite at each injection
csvFile = ./fi_cuda_mxm_single_single_bit.csv

# YOU SHOULD NOW CREATE A SCRIPT ON BENCHMARK SOURCE TO VERIFY THE GOLD OUTPUT x INJ_OUTPUT
# it must contains a function called sdc_check and must return True or False
# True for masked
# False for SDC
goldenCheckScript = codes/mxm/sdc_check.sh

# Register limit
maxNumRegs = 16
