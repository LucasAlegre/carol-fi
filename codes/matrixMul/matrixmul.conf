[DEFAULT]

debug = False

# Name of the gdb executable
gdbExecName = /usr/local/cuda-8.0/bin/cuda-gdb

# Which fault model to use, 0 -> single; 1 -> double; 2 -> random; 3 -> zeros; 4 -> least significant bits (LSB)
# If you want multiple fault models, place them separated by ','
# faultModel = 0,2,3
faultModel = 0

# KERNEL_BREAKS dict must have the line breakpoint for those kernels
# that the faults will be injected
# <.cu source file>:<first line of the kernel>;<.cu source file2>:<first line of the kernel2>...
kernelBreaks = matrixMul.cu:51;

# Injection type, if you want gdb makes breaks in the source code set it to 'break'
# If you want that gdb send signals to app, set it to signal
injType = break

# Gold file and output file
# Gold file must be created before FI execution
# At least the gold directory must exists
goldFile = /tmp/gold_5000000
outputFile = /tmp/hotspot/output_5000000

# Max time factor to finish the app, this will be multiplied by the application running time
# For example if your app spend 2s, and the maxWaitTimes is 5, the max running time before it is
# Considered as a crash is 10s
maxWaitTimes = 5

# Commands to set the session inside GDB environment
gdbInitStrings = file /home/carol/carol-fi/codes/matrixMul/matrixMul

# Shell command to send SIGINT to the application being tested
signalCmd = killall -2 matrixMul

# Kill commands to exit all applications (GDB and the application tested)
# Need to ensure safe termination before another fault injection test
killStrs = killall -9 cuda-gdb;killall -9 matrixMul;killall -9 cudbgprocess

# How many interrupt signals to send sequentially
seqSignals = 1

# How many random threads will attempt to send interrupt signals
numThreadsFI = 1

# How many interrupt signals to send sequentially
seqSignals = 5

# CSV output file. It will be overwrite at each injection
csvFile = ./temp.csv