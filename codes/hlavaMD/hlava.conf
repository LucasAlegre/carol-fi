[DEFAULT]

debug = False

# Name of the gdb executable
gdbExecName = /usr/local/cuda-8.0/bin/cuda-gdb

# Which fault model to use, 0 -> single; 1 -> double; 2 -> random; 3 -> zeros; 4 -> least significant bits (LSB)
# If you want multiple fault models, place them separated by ','
# faultModel = 0,2,3
faultModel = 0

# Injection site
# Can be:
# RF -> Register File
# INST_OUT -> Instruction Output (NOT IMPLEMENTED YET)
# INST_ADR -> Instruction Adress (NOT IMPLEMENTED YET)
injectionSite = RF

# KERNEL_BREAKS dict must have the line breakpoint for those kernels
# that the faults will be injected
# <.cu source file>:<first line of the kernel>;<.cu source file2>:<first line of the kernel2>...
kernelBreaks = hlava.cu:210-hlava.cu:424;

# Injection type, if you want gdb makes breaks in the source code set it to 'break'
# If you want that gdb send signals to app, set it to signal
injType = break

# Max time factor to finish the app, this will be multiplied by the application running time
# For example if your app spend 2s, and the maxWaitTimes is 5, the max running time before it is
# Considered as a crash is 10s
maxWaitTimes = 5

# Commands to set the session inside GDB environment
gdbInitStrings = file /home/carol/carol-fi/codes/hlava/hlava; set args -boxes=10 -input_distances=input_distances_half_10 \
                -input_charges=input_charges_half_10 -output_gold=gold_10 -iterations=1 -streams=1

# Shell command to send SIGINT to the application being tested
signalCmd = killall -2 hlava

# Kill commands to exit all applications (GDB and the application tested)
# Need to ensure safe termination before another fault injection test
killStrs = killall -9 cuda-gdb;killall -9 hlava;killall -9 cudbgprocess

# How many interrupt signals to send sequentially
seqSignals = 1

# How many random threads will attempt to send interrupt signals
numThreadsFI = 1

# How many interrupt signals to send sequentially
seqSignals = 5

# CSV output file. It will be overwrite at each injection
csvFile = ./temp.csv

# YOU SHOULD NOW CREATE A SCRIPT ON BENCHMARK SOURCE TO VERIFY THE GOLD OUTPUT x INJ_OUTPUT
# it must contains a function called sdc_check and must return True or False
# True for masked
# False for SDC
goldenCheckScript = codes/hlava/sdc_check.sh

# Register limit
maxNumRegs = 72