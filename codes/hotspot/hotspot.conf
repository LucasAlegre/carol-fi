[DEFAULT]

debug = False

# Name of the gdb executable, usualy is "cuda-mic" for NVIDIA
gdbExecName = cuda-gdb

# Which fault model to use, 0 -> single; 1 -> double; 2 -> random; 3 -> zeros; 4 -> least significant bits (LSB)
faultModel = 0

# KERNEL_BREAKS dict must have the line breakpoint for those kernels
# that the faults will be injected
# <.cu source file>:<first line of the kernel>;<.cu source file2>:<first line of the kernel2>...
kernelBreaks = hotspot.cu:186;

# Gold file and output file
# Gold file must be created before FI execution
goldFile = /tmp/hotspot/gold_5000000
outputFile = /tmp/hotspot/output_5000000

# Max time to send signal. It should be the app exec time in seconds
maxWaitTime = 20

# Commands to set the session inside GDB environment
gdbInitStrings = file /home/carol/carol-fi/codes/hotspot/hotspot; set args -size=1024 -sim_time=1024 \
                -temp_file=/home/carol/carol-fi/codes/hotspot/temp_1024 -power_file=/home/carol/carol-fi/codes/hotspot/power_1024 \
                -gold_file=/home/carol/carol-fi/codes/hotspot/gold_1024 -iterations=2 -streams=4

# Shell command to send SIGINT to the application being tested
signalCmd = killall -2 hotspot

# Kill commands to exit all applications (GDB and the application tested)
# Need to ensure safe termination before another fault injection test
killStrs = killall -9 cuda-gdb;killall -9 hotspot;killall -9 cudbgprocess

# How many interrupt signals to send sequentially
seqSignals = 1

# How many random threads will attempt to send interrupt signals
numThreadsFI = 1

# Start and end time to try randomly inject a fault
initSignal = 0
endSignal = 3.5

# How many interrupt signals to send sequentially
seqSignals = 5

# How many random threads will attempt to send interrupt signals
numThreadsFI = 3