[INFO -- 2018-09-25 09:41:08]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-25 09:41:08]
Initialization strings:
[INFO -- 2018-09-25 09:41:08]
(1) file /tmp/knapsack/ga
[INFO -- 2018-09-25 09:41:08]
initSignal:1
[INFO -- 2018-09-25 09:41:08]
endSignal:3.5
[INFO -- 2018-09-25 09:41:08]
faultModel:1
[INFO -- 2018-09-25 09:41:09]
Backtrace BEGIN:
#0  0x0000555555556dd8 in std::vector<int, std::allocator<int> >::size (this=0x7fffffffd910) at /usr/include/c++/7/bits/stl_vector.h:671
#1  0x000055555555612b in std::vector<int, std::allocator<int> >::operator= (this=0x7fffffffd950, __x=std::vector of length 200, capacity 200 = {...}) at /usr/include/c++/7/bits/vector.tcc:203
#2  0x000055555555516a in crossover (pai=std::vector of length 200, capacity 200 = {...}, mae=std::vector of length 200, capacity 200 = {...}, filho1=std::vector of length 0, capacity 0, filho2=std::vector of length 0, capacity 0) at knapsackga.cpp:76
#3  0x000055555555548d in genetic_algorithm () at knapsackga.cpp:104
#4  0x00005555555558d7 in main () at knapsackga.cpp:137

666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type
675	      max_size() const _GLIBCXX_NOEXCEPT

Backtrace END
Memory content before bitflip:0x280x000x000x00
Fault Model: Double bit-flip
base address to flip value: 0x55555575f010 
address max offset: 4
Memory content after  bitflip:0x6a0x000x000x00
frame name: crossover
symbol name: pop_size
symbol filename: knapsackga.cpp
symbol line: 17
value: 106
value address: 0x55555575f010 <pop_size>
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-09-25 09:41:09]
Fault Injection Successful after 1.625394582748413s
[INFO -- 2018-09-25 09:41:09]
event type: exit
[EXCEPTION -- 2018-09-25 09:41:09]
exit code: no exit code available
